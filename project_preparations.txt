Born2beroot project:

MANDATORY PART

1.	AppArmor (Debian) running at startup.
		Debian 10 and onward have AppArmor by default.
2.	2 or more encrypted partitions (created with LVM).
		During instalation we can chose to encrypt partition
3.	SUDO must be installed and configured.
		To install sudo we put:
			'su'
			'apt intall sudo'
		We need to reboot so the changes can be applied:
			'sudo reboot'
		To checg if sudo was istalled correctly:
			'sudo -V'
	- there need to be protection for brute forse attack. Only 3 attempts for authentication via password,
	- there need to be custom massage afted every false to authenticate via password,
	- every action using sudo must be archived (inpust and outputs) in log file located in /var/log/sudo/,
	- TTY mode must be enabled,
	- the paths that can be used by sudo must be restricted.
		To add policies to SUDO we need to create file in /etc/sudoers.d:
			'touch /etc/sudoers.d/sudo_config'
		Then directory in /var/log:
			'mkdir /var/log/sudo'
		To add policies we put:
			'nano /etc/sudoers.d/sudo_config'
			We add as follows:
			'Defaults  passwd_tries=3' - Total tries for entering the sudo password
			'Defaults  badpass_message="Optimus Prime says NO"' - The message 
			that will show when the password failed
			'Defaults  logfile="/var/log/sudo/sudo_config"' - Path where will the sudo 
			logs will be stored.
			'Defaults  log_input, log_output' - What will be logged
			'Defaults  iolog_dir="/var/log/sudo"' - What will be logged
			'Defaults  requiretty' - TTY become required
			'Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/
			bin"' - Folders that will be excluded of sudo
4.	There need to be root user and user with my login as username.
		If we dont have user yet we can use:
			'sudo adduser <login>'
		If we already have this user system will tell us.
	And user with my username must be in 'user42' and 'sudo' groups.
		To create new group we use:
			'sudo addgroup <name of group>'
		To check on created group we can put:
			'getent group <name of group>'
		To add user to group we put:
			'sudo adduser <user> <name of group>'
		To check if the adding worked:
			'getent group <name of group>'
5.	SSH service running on the mandatory port 4242.
		To install ssh we put:
			'sudo apt update'
			'sudo apt install openssh-server'
		We can chceck SSH service with:
			'sudo service ssh status'
		We also need to restart service so it can be updated:
			'sudo service ssh restart'
6.	Root must not be able to connect using SSH.
		We change that in file sshd_config:
			'su'
			'nano /etc/ssh/sshd_config'
			Change line that starts with "PermitRootLogin yes"
7.	System must be configured with UFW. Only port 4242 must be open in VM.
		To install ufw we put:
			'sudo apt install ufw'
		To start it we put:
			'sudo ufw enable'
		To change firewall to accept port 4242 we put:
			'sudo ufw allow 4242'
		We can chceck UFW service with:
			'sudo ufw status'
		To open port 4242 we need to change file sshd_config and ssh_config:
			'su'
			'nano /etc/ssh/sshd_config'
			Change line that starts with "Port 22"
			'nano /etc/ssh/ssh_config'
			Change line that starts with "Port 22"
		Also in settings of LM we need to go to Network -> Advenced -> Port fowarding 
		and add new rule with port 4242.
8.	Hostname of VM must be login ending with 42 -> ajurczyk42
		We name host during instalation.
9.	Strong password policy must be implemented.
	- password has to expire every 30 days,
	- password can't be changed until 2 days before its expiration,
	- user has to receive warning massage 7 days before password expiration,
		We can change that in file login.defs by:
			'su'
			'nano /etc/login.defs
			We can change lines that starts with "PASS_MAX_DAYS", "PASS_MIN_DAYS" and "PASS_WARN_AGE"
			But it is default that system send warning 7 days before so we dont need to change that.
		The changes arent automatically applied to existiong users so we use:
			'sudo change -M 30 <username/root>'
			'sudo change -m 2 <username/root>'
			'sudo change -W 7 <username/root>'
	- password must be at last 10 characters long, with uppercase and lowercase letter, and aslo a number.
	- password can't have more than 3 consecutive identical characters,
	- password can't contain name of the user,
	- password must have at least 7 characters that are not part of former password (!!! THIS RULE DOESN'T APPLY TO ROOT PASSWORD !!!).
		To enforce password quality we need to install:
			'sudo apt install libpam-pwquality'
		We can add rules for password quality in file common-password:
			'nano /etc/pam.d/common-paddword'
			We need to find line that start with "password requisite pam_pwquality.so retry=3" and add:
				'minlen=10' - The password must be at last 10 characters long
				'ucredit=-1' - The password at least have to contain a capital letter
				'lcredit=-1' - he password at least have to contain a lowercase letter
				'dcredit=-1' - The passworld at least have to containt a digit
				'maxrepeat=3' - The password can not have the same character 
				repited three contiusly times
				'reject_username' - The password can not contain the username inside itself
				'difok=7' - The password it have to containt at least seven diferent 
				characters from the last password ussed. Note that root is not asked for 
				an old password so the check isnt performed. We cant make difok for root. 
				'enforce_for_root' - Implement this password policy to root
		Now we need to change user passwords to comply:
			'sudo passwd <user/root>'
10.	After setting up configuration files all passwords of the accounts present on VM must be changed.
		To chenge password we can put:
			'sudo passwd <user/root>'
11.	Script called monitoring.sh must be created in bash.
	- script must display information at server starup and every 10 minutes on all terminals,
	- no error must be visible,
	- script must displey informaion about:
		+ architectire of operation system and its kernel version,
		+ number of physical processors,
		+ number of virtual processors,
		+ current available RAM on server and its utilization rate as a percentage,
		+ current available storage on serwer and its utilization rate as percentage,
		+ current utilization rate of processors as a percentage,
		+ date and time of the last reboot,
		+ whether LVM is active or not,
		+ number of active connections,
		+ number of users using the server,
		+ IPv4 address of server and its MAC address,
		+ number of commands executed with the sudo program.
			All comments needed for this are listed bellow.



Phrases and names to be elaborated:
1.	Kernel
	Main component of a Linux operating system and the core interface between a computer hardware and its processes.
	It communicates between the 2, managing resources as efficiently as possibe.
	Kernel jobs:
		- Memory management: keep track of how much memory is used to store what and where.
		- Process management: determine which processes can use the CPU, when and for how long.
		- Device drivers: Act as mediator/interpreter between the hardware and processes.
		- System calls and security: receive request for service from the processes.
2.	AppArmor
	Debian 10 and onward have AppArmor by default.
	AppArmor help in protection the system against known and unknown vulnerabilities.
	AppArmor apply set of rules (profiles) that specify what files a given program can access.
	In contrast to SELinux the rules applied do not depend on the user. All users face the same set of rules when they are executing the same program.
	Profiles contain a list of access control rules on resources that each program can make use of.
	Profiles are compiled and loaded into kernel by the 'apparmor_parser' command.
	Command 'aa-status' will check if it is running.
3.	Disk partiotion
	Disk partitioning is a creation of one or more storage regions (called partitions).
	Thanks to that each region can be managed separately.
	It is common practice to reserve partitions for services that can generate a lot of volume in order to avoid saturating the system partitions.
	Short list of partitions that we use in this project:
		- '/' contains the rest of the tree
		- '/boot' contains data that is used before the kernel begins execiting user-mode programs
		- '/var' contains variable files
		- '/tmp' contains temporary files
		- '/home' contains HOME users
4.	LVM
	LVM = logical volume management.
	LVM provides greater view of the disk storage on a computer system.
	Storage volumes created under the control of LVM can be resized and moved around easly.
	Encrypted LVM is protection of the confidentiality of data.
	GRUB v1 and LILO is not compatible with LVM. In such situation they should be outside the storage disk managed by LVM.
	LVM commands:
		- 'lvmchange' change attributes of the LVM
		- 'lvmdiskscan' scan for all devices visible to LVM2
		- 'lvmdump' creat lvm2 information dumps for diagnostic purposes
		There is also a lot of commends for Physical Volumes (PV) and Volume Groups (VG) but for this project we will focus on Logical Volumes (LV):
		- 'lvchange' change attributes of a LV
		- 'lvconvert' converting a LV from linear to mirror snapshot.
		- 'lvcreate' create a LV in existing Volume Groups.
		- 'lvdisplay' display the attributes of a LV
		- 'lvextend' extend the size of a LV
		- 'lvreduce' reduce the size of a LV
		- 'lvremove' remove a LV
		- 'lvrename' rename a LV
		- 'lvresize' resize a LV
		- 'lvs' report information about LV
		- 'lvscan' scan (all disks) for LV
5.	SSH and ports
	SSH = Secore Shell
	Protocol for secore remote login and other secure network services over an insecure network.
	Main configuration files for SSH:
		- ssh_config: client configuration file
		- sshd_config: server configuration file
	Port numbers are used to distinguish between different services that run over transport protocols.
	Port numbers are assinged based o three ranges:
		- System ports (0-1023). They are used by system processes that provide widely used types of network services.
		- User ports (1024-49151). They are assigned by IANA (organization that oversees global IP address allocation). 
		Port 4242 is assigned to DICOM server (digital storage and transmission of medical images) and/or 
		Quassel (allows simultaneouns connections to multiple IRC servers).
		- Dynamic/Private Ports (49152-65535). Used for private or customized services for temporary purposes.
6.	UFW
	UFW = Uncomplicated Firewall
	Provides a framework for managing netfilter, as well as a command-line interface for manipulating the firewall.
	Its role is to secure a network by defining the allowed or forbidden communicatios via rules.
	'ufw allow ####' is used for setting up a rule.
7.	Users, Groups
	Linux uses groups as a way to organize users. They exist to make permissionig of files and folders simpler.
	Linux was designed to allow more than one user to have access to the system at the same time but with different permissions.
8.	Root
	Name of the most powerful account. Also known as supervisor, superuser and administrator.
	If debian uses SELinux root is just another account.
	In terminal we can use 'su' to change our identity to root.
9.	SUDO
	Sudo = Superuser do
	Sudo gives the designated user a power to act as an administrator temporarly.
	Its give another user limited access to another user account for the purpose of performing tasks.
	File "/etc/sudoers" contains rights given to users.
10.	TTY
	TTY = TeleTypewritter
	'tty' will tell us what is the name of our terminal.
11.	Aptitude and apt
	'aptitude' remembers which packages were explicitly requested and which were only installed due to dependencies.
	It will automatically ununstall packages which were not explicitly requested when they are no longer needed.
	'apt' will only do explicitly what it is told to do in the command line.
12.	SELinux
	SELinux = Secirity-Enhanced Linux
	It differs from regular Linux security in that in addition to the traditional UNIX user id and group id, it also attaches a SELinux user, role, domain (type), and sensitivity label to each file and process.
13.	Git and Vim
	Git lets us track changes in files and compare different versions, it also allows going back to a previous version of certain file.
	In practice git allows creating a repository, indexing, commiting, branching, reverting, cloning, pushing.
	Vim is a full-featured text editor.
14.	During configuration of Debian in VM
	- SCSI3 (sda)
		Small Computer System Interface 3
	- GNOME, GNOME Flashback
		Desktop environment (just like in 42)
	- Xfce
		Desktop environment (more similar to windows, its simplifier)
	- KDE Plasma
		Desktop environment
	- Cinnamon
		Desktop environment
	- MATE
		Desktop environment
	- LXDE
		Desktop environment
	- LXQt
		Desktop environment
	- standard system utilities
		contains system utilities like sudo etc...
	- GRUB boot
		bootloader and boot manager for Linux and other Unix-based OSes
15.	nano
	is used to invoke the full command line text editor
16.	getent
	helps user to get entries in many important text files called databases
17.	cat
	create new file
18.	Scripts in bash, Wall, Banner, Cron. Interraption of running script
	- 'uname' Show information about our system. 
		Adding '-s' will show same information as just 'uname'.
		Adding '-a' will show all information about our system.
		Adding '-n' will show name of the host.
		Adding '-r' will show nr of kernel.
		Adding '-v' will show version of kernel.
		Adding '-m' will show name of our processor.
		Adding '-p' will show type of our processor.
		Adding '-i' will show name of hardware platform.
		Adding '-o' will show name of our system.
	- 'grep' is a tool for filter text files, multiple file names, finding lines in files/folders. 
		Basic syntex looks as follows: grep [OPTIONS] pattern [FILE], where:
		+ grep - the utility name
		+ options - arguments that modify the grep command's behavior
			* '-r' search all files in folder
			* '-A(number of lines)' prints the line after the matching entry
			* '-B(number of lines)' prints the line before the matching entry
			* '-C(number of lines)' prints lines both after and before the matching entry
			* '-i' ignore case distinctions
			* '-v' displey only those lines without the matching entry
			* '-n' display also line numbers of matching entry
			* '-c' display count of how many lines contain a matching entry
			* '-o' display count of pattern occurrence
		+ pattern - the keyword you want to look up
			* 'char.char' the . will search for lines with any character between provided chars
			* 'char?char' the ? will search for lines with 0 or 1 character between provided chars
			* 'char*char' the * will search for lines with 0 or more characters between provided chars
			* 'char+char' the + will search for lines with 1 or more characters between provided chars
			* '^pattren' the ^ will search for lines that begin with a specific pattern
			* 'pattern$' the $ will search for line that end with a specific pattern
			* () groups pattrens
		+ file - the item whore content you want to search
	- 'wc' display number of:
		+ '-c' or '--bytes' bytes
		+ '-l' or '--lines' lines
		+ '-L' or '--max-line-lenght' max line lenght
		+ '-m' or '--chars' chars
		+ '-w' or '--words' words
	- 'free' Provides information about the total amount of the physical and swap memory, as well as the free and used memory.
		Used without any option will display information about memory and swap in kikibyte. 1 kikibyte (KiB) is 1024 bytes.
		Adding '-h' will show informations in megabytes (MB) and gigabytes (GB)
		Adding '-b' or '--bytes' will show informations only in bytes (B)
		Adding '--kilo' will show informations only in kilobytes (KB)
		Adding '--mega' will show informations only in megabytes (MB)
		Adding '--giga' will show informations only in gigabytes (GB)
		Adding '--tera' will show informations only in terabytes (TB)
		There is also option for mebibytes, gibytes, tebibytes, pebibytes. The rule is the same.
		Adding '--si' will use power of 1000 instead of 1024. So for examble '--mebi --si' will show information in megabytes.
		Adding '-t' will show columns total
		Adding '-s x' or '--seconds x' will show informations every x seconds
		Adding '-c x' or '--count x' will show informations only x times
	- 'awk' Scan patterns and process the output of commands
		Basic syntax looks as follows: COMMAND | awk '/PATTERN/ {ACTION}' where:
		+ COMMAND - is the command whose output we wanr to process or filter
		+ awk - the utility name
		+ PATTERN - is a text string or a pattren used to filter the output of the specified command
		+ ACTION - is the action to perform on the lines matching the specified pattern
		To print one or more specific columns instead of entire line we can use syntax $, for example: $number_of_the_column
		Addinf '-F 'x'' will replace space delimiter (default delimiter) for x delimiter
		To count the occurrences of specified pattern we can increment a variable using '++'
		To add up the values of column and print their sum we can use '+='
		We need to remember to use 'END' to specify a command to execute once all the lines are processed
	- 'df' Show partitions structure and their usage
		Adding '-h' will show informations in megabytes (MB)
		Adding '-i' will show informations about i-nodes
		Adding '-l' will limit informations to local disks
		Adding '--total' will show informations with columns total
	- 'vmstat' Show informatin about memory, system processes, paging, interrupts, block I/O, disk, and CPU scheduling
		Usually its used with two parameters. 
		First parameter makes the values measured and delivered every x seconds
		Second parameter make the values will be delivered x times, then the program will be terminated
	- 'tail' Prints the last N numbers of data of the given input.
		Basic syntax looks as follows: tail OPTION FILE, where:
		+ tail - the utility name
		+ OPTION - arguments that modify the tail command's behavior
			* '-x' where x is a number. Prints last x lines
			* '+x' where x is a number. Prints the data starting from x line.
			* '-n x' or '--lines x' prints last x lines
			* '-c x' or '--bytes x' prints last x bytes
			* '-c +x' or '--bytes +x' Prints all the data after x bytes
			* '-q' is used if more than 1 file is given, and we dont want to have new line
			* '-v' Prints data from the file with its name on the top
		+ FILE - name of the file or its location
		By default it prints last 10 lines of specified file.
	- 'expr' Allow the evaluation of values and return the result to standard output
	- 'who' Prints a list of currently logged in users. It can also show run level, time of last system boot and more.
		Standard who will print the name of logged user, user terminal, time when the use logged in, hostname or IP address from where the user is logged in.
		Adding '--ips' will force IPs to show
		Adding '-H' or '--heading' will print column headings
		Adding '-b' or '--boot' will print only last system boot
		Adding '-d' or '--dead' will print all the dead processes
		Adding '-r' or '--runlevel' will print only current runlevel
		Adding '-q' or '--count' will print only currently logged users and its count
		Adding '-a' or '--all' will print all the informations
	- 'lsblk' Lists information about all avaible or the specified block devices
	- 'echo' Prints arguments in standard output
	- 'ss' Display TCPs and state information. Netwrk connections
		Adding '-a' or '--all' will display all sockets
		Adding '-t' or '--tcp' will display only TCP sockets
	- 'users' Show the user names of users currently logged in
	- 'hostname' Show DNS name and set the system hostname or NIS domain name
		Adding '-I' show IP adress of our server
	- 'ip' Show information about connections
		Adding 'link' will show information about mac adress
	- 'journalctl' Utility for querying and displaying logs from joutnald
		Adding '_COMM=search' match for the script name is added to the query
	- 'wall' Writes a message on the terminal of all currently logged-in users
19.	CRON
		Allows to plan script execution in specific time intervals.
		To properly configure crontab we must edit crontab file:
			'sudo crontab -u root -e'
			Add command at the end:
			'*/10 * * * * sh /home/<user>/monitoring.sh'
			Script will execute every 10 minutes.
		All combinations for cron we can find by 'man 5 crontab'.
